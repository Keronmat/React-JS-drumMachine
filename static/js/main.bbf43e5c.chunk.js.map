{"version":3,"sources":["components/DisplayComponent.js","components/TopSwitchPanelComponent.js","shared/data.js","shared/baseUrl.js","components/RenderSound.js","components/VolumeComponent.js","components/LoadingComponent.js","redux/ActionCreators.js","redux/ActionTypes.js","components/MainComponent.js","redux/getDataReducer.js","redux/powerReducer.js","redux/displayReducer.js","redux/volumeReducer.js","redux/playingReducer.js","App.js","redux/configureStore.js","serviceWorker.js","index.js"],"names":["Display","props","playingStyles","backgroundColor","concat","getRandomColor","offStyles","power","react_default","a","createElement","style","playing","className","display","TopSwitchPanel","Fragment","FormGroup","Label","for","CustomInput","type","name","id","label","onChange","handlePower","defaultChecked","DisplayComponent","BUTTONDATA","trigger","keyCode","url","baseUrl","RenderButton","onStyle","transform","boxShadow","offStyle","data","dataObj","map","key","data-key","onClick","handleClickSound","RenderSound","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","RenderSound_RenderButton","activeId","Component","Volume","_ref","currentVolume","handleVolume","defaultValue","min","max","step","event","Loading","dataLoading","addData","payload","Main","_this","togglePower","handleKeydownSound","drumKey","find","obj","playSound","handleBorderColor","alert","soundName","sound","Audio","volume","play","handleDisplay","toggleDisplay","setTimeout","newVolume","target","value","message","toggleVolume","toggleIsPlaying","fetchData","document","addEventListener","EventListener","colorValues","Math","floor","random","length","isLoading","LoadingComponent_Loading","errMess","RenderSound_RenderSound","connect","state","dispatch","currentState","newDisplay","GetData","arguments","undefined","action","objectSpread","PowerReducer","DisplayReducer","VolumeReducer","PlayingReducer","store","createStore","combineReducers","applyMiddleware","thunk","logger","App","es","MainComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sQAkBeA,EAhBC,SAAAC,GACd,IAAMC,EAAgB,CACpBC,gBAAe,GAAAC,OAAKH,EAAMI,mBAEtBC,EAAY,CAChBH,gBAAe,GAAAC,OAAKH,EAAMM,MAAMA,MAAQ,eAAiB,iBAE3D,OACEC,EAAAC,EAAAC,cAAA,OACEC,MAAyB,OAAlBV,EAAMW,QAAmBV,EAAgBI,EAChDO,UAAU,mBAETZ,EAAMa,QAAQA,kCCVN,SAASC,EAAed,GACrC,OACEO,EAAAC,EAAAC,cAACF,EAAAC,EAAMO,SAAP,KACER,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACET,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAOC,IAAI,mBAAX,SACAX,EAAAC,EAAAC,cAAA,OAAKG,UAAU,UACbL,EAAAC,EAAAC,cAACU,EAAA,EAAD,CACEC,KAAK,SACLC,KAAK,eACLC,GAAG,sBACHC,MAAQvB,EAAMM,MAAMA,MAAe,MAAP,KAC5BkB,SAAUxB,EAAMyB,YAChBC,gBAAgB,OAKxBnB,EAAAC,EAAAC,cAACkB,EAAD,CACEd,QAASb,EAAMa,QACfP,MAAON,EAAMM,MACbF,eAAgBJ,EAAMI,eACtBO,QAASX,EAAMW,WC1BhB,IAAMiB,EAAa,CACxB,CACEN,GAAI,EACJD,KAAM,OACNQ,QAAS,IACTC,QAAS,GACTC,IAAK,yBACLpB,SAAS,GAEX,CACEW,GAAI,EACJD,KAAM,QACNQ,QAAS,IACTE,IAAK,0BACLD,QAAS,GACTnB,SAAS,GAEX,CACEW,GAAI,EACJD,KAAM,OACNQ,QAAS,IACTE,IAAK,yBACLD,QAAS,GACTnB,SAAS,GAEX,CACEW,GAAI,EACJD,KAAM,UACNQ,QAAS,IACTE,IAAK,4BACLD,QAAS,GACTnB,SAAS,GAEX,CACEW,GAAI,EACJD,KAAM,OACNQ,QAAS,IACTE,IAAK,yBACLD,QAAS,GACTnB,SAAS,GAEX,CACEW,GAAI,EACJD,KAAM,OACNQ,QAAS,IACTE,IAAK,yBACLD,QAAS,GACTnB,SAAS,GAEX,CACEW,GAAI,EACJD,KAAM,QACNQ,QAAS,IACTE,IAAK,0BACLD,QAAS,GACTnB,SAAS,GAEX,CACEW,GAAI,EACJD,KAAM,MACNQ,QAAS,IACTE,IAAK,wBACLD,QAAS,GACTnB,SAAS,GAEX,CACEW,GAAI,EACJD,KAAM,OACNQ,QAAS,IACTE,IAAK,yBACLD,QAAS,GACTnB,SAAS,ICtEAqB,EACX,iFCCIC,EAAe,SAAAjC,GACnB,IAAMkC,EAAU,CACdC,UAAW,cACXC,UAAW,sDAEPC,EAAWrC,EAAMM,MAAMA,MACzB,CAAEJ,gBAAiB,gBACnB,CAAEA,gBAAiB,gBAEjBoC,EAAOtC,EAAMuC,QAAQC,IAAI,SAAAhC,GAC7B,OACED,EAAAC,EAAAC,cAAA,OACEgC,IAAKjC,EAAEc,GACPV,UAAU,YACVF,MAAOV,EAAMW,UAAYH,EAAEc,GAAKY,EAAUG,GAE1C9B,EAAAC,EAAAC,cAAA,OACEG,UAAU,YACV8B,WAAUlC,EAAEsB,QACZa,QAAS,WACP3C,EAAM4C,iBAAN,GAAAzC,OAA0B6B,EAAUxB,EAAEuB,KAAOvB,EAAEa,KAAMb,EAAEc,MAGzDf,EAAAC,EAAAC,cAAA,WAAMD,EAAEqB,SACRtB,EAAAC,EAAAC,cAAA,QAAMG,UAAU,SAASJ,EAAEa,UAKnC,OAAOd,EAAAC,EAAAC,cAACF,EAAAC,EAAMO,SAAP,KAAiBuB,IAGLO,cACnB,SAAAA,EAAY7C,GAAQ,OAAA8C,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAD,GAAAM,KAAAH,KACZhD,0EAIN,OACEO,EAAAC,EAAAC,cAAC2C,EAAD,CACEC,SAAUL,KAAKhD,MAAMqD,SACrBd,QAASS,KAAKhD,MAAMuC,QACpBK,iBAAkBI,KAAKhD,MAAM4C,iBAC7BtC,MAAO0C,KAAKhD,MAAMM,MAClBF,eAAgB4C,KAAK5C,eACrBO,QAASqC,KAAKhD,MAAMW,iBAba2C,aCjC1B,SAASC,EAATC,GAAiD,IAA/BC,EAA+BD,EAA/BC,cAAeC,EAAgBF,EAAhBE,aAC9C,OACEnD,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACbL,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,SACEG,UAAU,SACV+C,aAAcF,EACdrC,KAAK,QACLwC,IAAI,IACJC,IAAI,IACJC,KAAK,OACLzC,KAAK,SACLG,SAAU,SAAAuC,GAAK,OAAIL,EAAaK,OAGpCxD,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gCACbL,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,aCnBD,IAAMuD,EAAU,WACrB,OACEzD,EAAAC,EAAAC,cAAA,OAAKG,UAAU,UACbL,EAAAC,EAAAC,cAAA,QAAMG,UAAU,oDAChBL,EAAAC,EAAAC,cAAA,oCCqDOwD,EAAc,iBAAO,CAChC7C,KCxD0B,iBDgEf8C,EAAU,SAAA3B,GAAO,MAAK,CACjCnB,KChEsB,WDiEtB+C,QAAS5B,IEzBL6B,cACJ,SAAAA,EAAYpE,GAAO,IAAAqE,EAAA,OAAAvB,OAAAC,EAAA,EAAAD,CAAAE,KAAAoB,IACjBC,EAAAvB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsB,GAAAjB,KAAAH,KAAMhD,KAWRyB,YAAc,WACZ4C,EAAKrE,MAAMsE,YAAYD,EAAKrE,MAAMM,MAAMA,QAbvB+D,EAiBnBE,mBAAqB,SAAAR,GACnB,IAAMS,EAAUH,EAAKrE,MAAMuC,QAAQD,KAAKmC,KACtC,SAAAC,GAAG,OAAIA,EAAI5C,UAAYiC,EAAMjC,UAEzBxB,EAAQ+D,EAAKrE,MAAMM,MAAMA,MAE3BA,GAASkE,GACXH,EAAKM,UAAU3C,EAAUwC,EAAQzC,IAAKyC,EAAQnD,MAC9CgD,EAAKO,kBAAkBJ,EAAQlD,MACrBhB,GAASkE,GACnBK,MAAM,4BA3BSR,EA+BnBzB,iBAAmB,SAACb,EAAK+C,EAAWxD,GAElC,IADc+C,EAAKrE,MAAMM,MAAMA,MAIxB,OAAOuE,MAAM,2BAFlBR,EAAKM,UAAU5C,EAAK+C,GACpBT,EAAKO,kBAAkBtD,IAnCR+C,EAwCnBM,UAAY,SAAC5C,EAAK+C,GAChB,IAAIC,EAAQ,IAAIC,MAAMjD,GACtBgD,EAAME,OAASZ,EAAKrE,MAAMiF,OAAOA,OACjCF,EAAMG,OACNb,EAAKc,cAAcL,IA5CFT,EAgDnBc,cAAgB,SAAAL,GACdT,EAAKrE,MAAMoF,cAAcN,GACzBO,WAAW,WACThB,EAAKrE,MAAMoF,cAAc,KACxB,MApDcf,EAwDnBX,aAAe,SAAAK,GACb,IAAMzD,EAAQ+D,EAAKrE,MAAMM,MACnBgF,EAAYvB,EAAMwB,OAAOC,MACzBC,EAAU,WAAkC,IAArB1B,EAAMwB,OAAOC,MAEtClF,IACF+D,EAAKrE,MAAM0F,aAAaJ,GACxBjB,EAAKc,cAAcM,KA/DJpB,EAyEnBO,kBAAoB,SAAAtD,GAClB+C,EAAKrE,MAAM2F,gBAAgBrE,GAC3B+D,WAAW,WACThB,EAAKrE,MAAM2F,gBAAgB,OAC1B,MA7EctB,mFAKjBrB,KAAKhD,MAAM4F,YACXC,SAASC,iBAAiB,UAAW9C,KAAKuB,mEAG1CsB,SAASE,cAAc,UAAW/C,KAAKuB,6DA2DvC,IAAIyB,EAAc,CAAC,UAAW,UAAW,UAAW,UAAW,WAC/D,OAAOA,EAAYC,KAAKC,MAAMD,KAAKE,SAAWH,EAAYI,0CAY1D,OAAIpD,KAAKhD,MAAMuC,QAAQ8D,UAEnB9F,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAC6F,EAAD,QAIGtD,KAAKhD,MAAMuC,QAAQgE,QAE1BhG,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,UAAKuC,KAAKhD,MAAMuC,QAAQgE,WAIM,MAA3BvD,KAAKhD,MAAMuC,QAAQD,KAE1B/B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,gBACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACbL,EAAAC,EAAAC,cAACK,EAAD,CACEW,YAAauB,KAAKvB,YAClBrB,eAAgB4C,KAAK5C,eACrBE,MAAO0C,KAAKhD,MAAMM,MAClBiC,QAASS,KAAKhD,MAAMuC,QAAQD,KAC5BzB,QAASmC,KAAKhD,MAAMa,QACpBF,QAASqC,KAAKhD,MAAMW,QAAQA,WAGhCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACbL,EAAAC,EAAAC,cAAC+F,EAAD,CACE5D,iBAAkBI,KAAKJ,iBACvBL,QAASS,KAAKhD,MAAMuC,QAAQD,KAC5BhC,MAAO0C,KAAKhD,MAAMM,MAClBF,eAAgB4C,KAAK5C,eACrBO,QAASqC,KAAKhD,MAAMW,QAAQA,QAC5BiE,kBAAmB5B,KAAK4B,qBAG5BrE,EAAAC,EAAAC,cAAC8C,EAAD,CACEG,aAAcV,KAAKU,aACnBD,cAAeT,KAAKhD,MAAMiF,eAzB3B,SAlGQ3B,aAiIJmD,cA9JS,SAAAC,GACtB,MAAO,CACLpG,MAAOoG,EAAMpG,MACb2E,OAAQyB,EAAMzB,OACdpE,QAAS6F,EAAM7F,QACf0B,QAASmE,EAAMnE,QACf5B,QAAS+F,EAAM/F,UAGQ,SAAAgG,GACzB,MAAO,CACLrC,YAAa,SAAAsC,GACXD,EFxBqB,SAAAC,GACzB,MAAO,CACLxF,KCNiB,QDOjB+C,SAAUyC,GEqBCtC,CAAYsC,KAEvBlB,aAAc,SAAAJ,GACZqB,EFrBsB,SAAArB,GAC1B,MAAO,CACLlE,KCXkB,SDYlB+C,QAASmB,GEkBEI,CAAaJ,KAExBK,gBAAiB,SAAArE,GACfqF,EFsCyB,SAAArF,GAAE,MAAK,CACpCF,KCtEwB,aDuExB+C,QAAS7C,GExCIqE,CAAgBrE,KAE3B8D,cAAe,SAAAyB,GACbF,EFrBuB,SAAAE,GAC3B,MAAO,CACLzF,KChBmB,UDiBnB+C,QAAS0C,GEkBEzB,CAAcyB,KAEzBjB,UAAW,WACTe,EFlByB,SAAAA,GAC7BA,EAAS1C,GAAY,IAErBoB,WAAW,WACTsB,EAASzC,EAAQtC,KAChB,UEmJU6E,CAGbrC,mDC/KW0C,EAAU,WAGlB,IAFHJ,EAEGK,UAAAX,OAAA,QAAAY,IAAAD,UAAA,GAAAA,UAAA,GAFK,CAAEV,WAAW,EAAME,QAAS,KAAMjE,KAAM,IAChD2E,EACGF,UAAAX,OAAA,EAAAW,UAAA,QAAAC,EACH,OAAQC,EAAO7F,MACb,IFFoB,WEGlB,OAAO0B,OAAAoE,EAAA,EAAApE,CAAA,GACF4D,EADL,CAEEL,WAAW,EACXE,QAAS,KACTjE,KAAM2E,EAAO9C,UAGjB,IFXwB,eEYtB,OAAOrB,OAAAoE,EAAA,EAAApE,CAAA,GAAK4D,EAAZ,CAAmBL,WAAW,EAAME,QAAS,KAAMjE,KAAM,KAE3D,IFZuB,cEarB,OAAOQ,OAAAoE,EAAA,EAAApE,CAAA,GAAK4D,EAAZ,CAAmBL,WAAW,EAAOE,QAASU,EAAO9C,UAEvD,QACE,OAAOuC,ICRES,EAZM,WAAsC,IAArCT,EAAqCK,UAAAX,OAAA,QAAAY,IAAAD,UAAA,GAAAA,UAAA,GAA7B,CAAEzG,OAAO,GAAS2G,EAAWF,UAAAX,OAAA,EAAAW,UAAA,QAAAC,EACzD,OAAQC,EAAO7F,MACb,IHJiB,QGKf,OAAO0B,OAAAoE,EAAA,EAAApE,CAAA,GACF4D,EADL,CAEEpG,MAAO2G,EAAO9C,UAGlB,QACE,OAAOuC,ICMEU,EAfQ,WAGlB,IAFHV,EAEGK,UAAAX,OAAA,QAAAY,IAAAD,UAAA,GAAAA,UAAA,GAFK,CAAElG,QAAS,yBACnBoG,EACGF,UAAAX,OAAA,EAAAW,UAAA,QAAAC,EACH,OAAQC,EAAO7F,MACb,IJLmB,UIMjB,OAAO0B,OAAAoE,EAAA,EAAApE,CAAA,GACF4D,EADL,CAEE7F,QAASoG,EAAO9C,UAGpB,QACE,OAAOuC,ICAEW,EAZO,WAAqC,IAApCX,EAAoCK,UAAAX,OAAA,QAAAY,IAAAD,UAAA,GAAAA,UAAA,GAA5B,CAAE9B,OAAQ,IAAOgC,EAAWF,UAAAX,OAAA,EAAAW,UAAA,QAAAC,EACzD,OAAQC,EAAO7F,MACb,ILHkB,SKIhB,OAAO0B,OAAAoE,EAAA,EAAApE,CAAA,GACF4D,EADL,CAEEzB,OAAQgC,EAAO9C,UAGnB,QACE,OAAOuC,ICGEY,EAZQ,WAAuC,IAAtCZ,EAAsCK,UAAAX,OAAA,QAAAY,IAAAD,UAAA,GAAAA,UAAA,GAA9B,CAAEpG,QAAS,MAAQsG,EAAWF,UAAAX,OAAA,EAAAW,UAAA,QAAAC,EAC5D,OAAQC,EAAO7F,MACb,INDsB,aMEpB,OAAO0B,OAAAoE,EAAA,EAAApE,CAAA,GACF4D,EADL,CAEE/F,QAASsG,EAAO9C,UAGpB,QACE,OAAOuC,ICLPa,ECIUC,YACZC,YAAgB,CACdlF,QAASuE,EACTxG,MAAO6G,EACPtG,QAASuG,EACTnC,OAAQoC,EACR1G,QAAS2G,IAEXI,YAAgBC,IAAOC,MDAZC,mLARX,OACEtH,EAAAC,EAAAC,cAACqH,EAAA,EAAD,CAAUP,MAAOA,GACfhH,EAAAC,EAAAC,cAACsH,EAAD,cAJUzE,aEIE0E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO/H,EAAAC,EAAAC,cAAC8H,EAAD,MAAS1C,SAAS2C,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bbf43e5c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Display = props => {\r\n  const playingStyles = {\r\n    backgroundColor: `${props.getRandomColor()}`\r\n  };\r\n  const offStyles = {\r\n    backgroundColor: `${props.power.power ? \"var(--ltRed)\" : \"var(--dkRed)\"}`\r\n  };\r\n  return (\r\n    <div\r\n      style={props.playing !== null ? playingStyles : offStyles}\r\n      className=\" col-8  display\"\r\n    >\r\n      {props.display.display}\r\n    </div>\r\n  );\r\n};\r\nexport default Display;\r\n","import React from \"react\";\r\nimport Display from \"./DisplayComponent\";\r\nimport { CustomInput, FormGroup, Label } from \"reactstrap\";\r\n\r\nexport default function TopSwitchPanel(props) {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"col-4 power\">\r\n        <FormGroup>\r\n          <Label for=\"exampleCheckbox\">Power</Label>\r\n          <div className=\"switch\">\r\n            <CustomInput\r\n              type=\"switch\"\r\n              name=\"customSwitch\"\r\n              id=\"exampleCustomSwitch\"\r\n              label={!props.power.power ? \"On\" : \"Off\"}\r\n              onChange={props.handlePower}\r\n              defaultChecked={false}\r\n            />\r\n          </div>\r\n        </FormGroup>\r\n      </div>\r\n      <Display\r\n        display={props.display}\r\n        power={props.power}\r\n        getRandomColor={props.getRandomColor}\r\n        playing={props.playing}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n}\r\n","export const BUTTONDATA = [\r\n  {\r\n    id: 0,\r\n    name: \"clap\",\r\n    trigger: \"A\",\r\n    keyCode: 65,\r\n    url: \"/assets/audio/clap.wav\",\r\n    playing: false\r\n  },\r\n  {\r\n    id: 1,\r\n    name: \"hihat\",\r\n    trigger: \"S\",\r\n    url: \"/assets/audio/hihat.wav\",\r\n    keyCode: 83,\r\n    playing: false\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"kick\",\r\n    trigger: \"D\",\r\n    url: \"/assets/audio/kick.wav\",\r\n    keyCode: 68,\r\n    playing: false\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"openhat\",\r\n    trigger: \"F\",\r\n    url: \"/assets/audio/openhat.wav\",\r\n    keyCode: 70,\r\n    playing: false\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"boom\",\r\n    trigger: \"G\",\r\n    url: \"/assets/audio/boom.wav\",\r\n    keyCode: 71,\r\n    playing: false\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"ride\",\r\n    trigger: \"H\",\r\n    url: \"/assets/audio/ride.wav\",\r\n    keyCode: 72,\r\n    playing: false\r\n  },\r\n  {\r\n    id: 6,\r\n    name: \"snare\",\r\n    trigger: \"J\",\r\n    url: \"/assets/audio/snare.wav\",\r\n    keyCode: 74,\r\n    playing: false\r\n  },\r\n  {\r\n    id: 7,\r\n    name: \"tom\",\r\n    trigger: \"K\",\r\n    url: \"/assets/audio/tom.wav\",\r\n    keyCode: 75,\r\n    playing: false\r\n  },\r\n  {\r\n    id: 8,\r\n    name: \"tink\",\r\n    trigger: \"L\",\r\n    url: \"/assets/audio/tink.wav\",\r\n    keyCode: 76,\r\n    playing: false\r\n  }\r\n];\r\n","//export const baseUrl = \"http://localhost:3001/\";\r\nexport const baseUrl =\r\n  \"https://raw.githubusercontent.com/Keronmat/React-JS-drumMachine/master/public/\";\r\n","import React, { Component } from \"react\";\r\nimport { baseUrl } from \"../shared/baseUrl\";\r\n\r\nconst RenderButton = props => {\r\n  const onStyle = {\r\n    transform: \"scale(0.95)\",\r\n    boxShadow: \"1px 1px 4px 4px #D81159, -1px -1px 4px 4px #FFBC42\"\r\n  };\r\n  const offStyle = props.power.power\r\n    ? { backgroundColor: \"var(--ltRed)\" }\r\n    : { backgroundColor: \"var(--dkRed)\" };\r\n\r\n  const data = props.dataObj.map(a => {\r\n    return (\r\n      <div\r\n        key={a.id}\r\n        className=\"outer-pad\"\r\n        style={props.playing === a.id ? onStyle : offStyle}\r\n      >\r\n        <div\r\n          className=\"inner-pad\"\r\n          data-key={a.keyCode}\r\n          onClick={() => {\r\n            props.handleClickSound(`${baseUrl + a.url}`, a.name, a.id);\r\n          }}\r\n        >\r\n          <kbd>{a.trigger}</kbd>\r\n          <span className=\"sound\">{a.name}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n  return <React.Fragment>{data}</React.Fragment>;\r\n};\r\n\r\nexport default class RenderSound extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <RenderButton\r\n        activeId={this.props.activeId}\r\n        dataObj={this.props.dataObj}\r\n        handleClickSound={this.props.handleClickSound}\r\n        power={this.props.power}\r\n        getRandomColor={this.getRandomColor}\r\n        playing={this.props.playing}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Volume({ currentVolume, handleVolume }) {\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-sm volume \">\r\n        <h6>Volume</h6>\r\n        <input\r\n          className=\"slider\"\r\n          defaultValue={currentVolume}\r\n          type=\"range\"\r\n          min=\"0\"\r\n          max=\"1\"\r\n          step=\"0.01\"\r\n          name=\"volume\"\r\n          onChange={event => handleVolume(event)}\r\n        />\r\n      </div>\r\n      <div className=\"speakers col-sm align-middle\">\r\n        <hr />\r\n        <hr />\r\n        <hr />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport const Loading = () => {\r\n  return (\r\n    <div className=\"col-12\">\r\n      <span className=\"fa fa-spinner fa-pulse fa-3x fa-fw text-primary\" />\r\n      <p>Loading . . .</p>\r\n    </div>\r\n  );\r\n};\r\n","import * as ActionTypes from \"./ActionTypes\";\r\nimport { baseUrl } from \"../shared/baseUrl\";\r\nimport { BUTTONDATA } from \"../shared/data\";\r\n\r\nexport const togglePower = currentState => {\r\n  return {\r\n    type: ActionTypes.POWER,\r\n    payload: !currentState\r\n  };\r\n};\r\nexport const toggleVolume = newVolume => {\r\n  return {\r\n    type: ActionTypes.VOLUME,\r\n    payload: newVolume\r\n  };\r\n};\r\nexport const toggleDisplay = newDisplay => {\r\n  return {\r\n    type: ActionTypes.DISPLAY,\r\n    payload: newDisplay\r\n  };\r\n};\r\nexport const fetchData = () => dispatch => {\r\n  dispatch(dataLoading(true));\r\n\r\n  setTimeout(() => {\r\n    dispatch(addData(BUTTONDATA));\r\n  }, 2000);\r\n};\r\n\r\n/* to be used only if getting data from server\r\nexport const fetchData = () => dispatch => {\r\n  dispatch(dataLoading(true));\r\n\r\n  return fetch(baseUrl + \"BUTTONDATA\")\r\n    .then(\r\n      response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error(\r\n            \"Error \" + response.status + \": \" + response.statusText\r\n          );\r\n\r\n          error.response = response;\r\n          console.log(error);\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n        var errmess = new Error(error.message);\r\n        throw errmess;\r\n      }\r\n    )\r\n    .then(response => response.json())\r\n    .then(data => dispatch(addData(data)))\r\n    .catch(error => dispatch(dataFailed(error.message)));\r\n};\r\n*/\r\nexport const dataLoading = () => ({\r\n  type: ActionTypes.DATA_LOADING\r\n});\r\n\r\nexport const dataFailed = errmess => ({\r\n  type: ActionTypes.DATA_FAILED,\r\n  payload: errmess\r\n});\r\n\r\nexport const addData = dataObj => ({\r\n  type: ActionTypes.ADD_DATA,\r\n  payload: dataObj\r\n});\r\nexport const toggleIsPlaying = id => ({\r\n  type: ActionTypes.IS_PLAYING,\r\n  payload: id\r\n});\r\n","export const POWER = \"POWER\";\r\nexport const VOLUME = \"VOLUME\";\r\nexport const DISPLAY = \"DISPLAY\";\r\nexport const IS_PLAYING = \"IS_PLAYING\";\r\nexport const DATA_LOADING = \"DATA_LOADING\";\r\nexport const ADD_DATA = \"ADD_DATA\";\r\nexport const DATA_FAILED = \"DATA_FAILED\";\r\n","import React, { Component } from \"react\";\r\nimport TopSwitchPanel from \"./TopSwitchPanelComponent\";\r\nimport { BUTTONDATA } from \"../shared/data\";\r\nimport RenderSound from \"./RenderSound\";\r\nimport Volume from \"./VolumeComponent\";\r\nimport { Loading } from \"./LoadingComponent\";\r\nimport { baseUrl } from \"../shared/baseUrl\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  togglePower,\r\n  toggleVolume,\r\n  toggleDisplay,\r\n  fetchData,\r\n  toggleIsPlaying //received an active id\r\n} from \"../redux/ActionCreators\";\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    power: state.power,\r\n    volume: state.volume,\r\n    display: state.display,\r\n    dataObj: state.dataObj,\r\n    playing: state.playing\r\n  };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    togglePower: currentState => {\r\n      dispatch(togglePower(currentState));\r\n    },\r\n    toggleVolume: newVolume => {\r\n      dispatch(toggleVolume(newVolume));\r\n    },\r\n    toggleIsPlaying: id => {\r\n      dispatch(toggleIsPlaying(id));\r\n    },\r\n    toggleDisplay: newDisplay => {\r\n      dispatch(toggleDisplay(newDisplay));\r\n    },\r\n    fetchData: () => {\r\n      dispatch(fetchData());\r\n    }\r\n  };\r\n};\r\n\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.fetchData();\r\n    document.addEventListener(\"keydown\", this.handleKeydownSound);\r\n  }\r\n  componentWillUnmount() {\r\n    document.EventListener(\"keydown\", this.handleKeydownSound);\r\n  }\r\n  //handles power, turns machine on and off\r\n  handlePower = () => {\r\n    this.props.togglePower(this.props.power.power);\r\n  };\r\n\r\n  //handles the sounds and effects when use keyboard button\r\n  handleKeydownSound = event => {\r\n    const drumKey = this.props.dataObj.data.find(\r\n      obj => obj.keyCode === event.keyCode\r\n    );\r\n    const power = this.props.power.power;\r\n\r\n    if (power && drumKey) {\r\n      this.playSound(baseUrl + drumKey.url, drumKey.name);\r\n      this.handleBorderColor(drumKey.id);\r\n    } else if (!power && drumKey) {\r\n      alert(\"Please turn the app on!\");\r\n    }\r\n  };\r\n  //handles the sounds and effects when use mouse click\r\n  handleClickSound = (url, soundName, id) => {\r\n    const power = this.props.power.power;\r\n    if (power) {\r\n      this.playSound(url, soundName);\r\n      this.handleBorderColor(id);\r\n    } else return alert(\"Please turn the app on!\");\r\n  };\r\n\r\n  //plays the sound and activate the volume function\r\n  playSound = (url, soundName) => {\r\n    let sound = new Audio(url);\r\n    sound.volume = this.props.volume.volume;\r\n    sound.play();\r\n    this.handleDisplay(soundName);\r\n  };\r\n\r\n  //changes message on the display\r\n  handleDisplay = soundName => {\r\n    this.props.toggleDisplay(soundName);\r\n    setTimeout(() => {\r\n      this.props.toggleDisplay(\"\");\r\n    }, 1000);\r\n  };\r\n\r\n  //changes the Volume\r\n  handleVolume = event => {\r\n    const power = this.props.power;\r\n    const newVolume = event.target.value;\r\n    const message = \"Volume: \" + event.target.value * 100;\r\n\r\n    if (power) {\r\n      this.props.toggleVolume(newVolume);\r\n      this.handleDisplay(message);\r\n    }\r\n  };\r\n  //change display background color\r\n  getRandomColor() {\r\n    let colorValues = [\"#D81159\", \"#218380\", \"#73D2DE\", \"#FFBC42\", \"#8F2D56\"];\r\n    return colorValues[Math.floor(Math.random() * colorValues.length)];\r\n  }\r\n  //takes in an id from handle click and pass it to toggle is playing\r\n  // this uses the active id to change border for active button\r\n  handleBorderColor = id => {\r\n    this.props.toggleIsPlaying(id);\r\n    setTimeout(() => {\r\n      this.props.toggleIsPlaying(null);\r\n    }, 200);\r\n  };\r\n\r\n  render() {\r\n    if (this.props.dataObj.isLoading) {\r\n      return (\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <Loading />\r\n          </div>\r\n        </div>\r\n      );\r\n    } else if (this.props.dataObj.errMess) {\r\n      return (\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <h4>{this.props.dataObj.errMess}</h4>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else if (this.props.dataObj.data != null)\r\n      return (\r\n        <div className=\"drum-machine\">\r\n          <div className=\"drum-panel row\">\r\n            <TopSwitchPanel\r\n              handlePower={this.handlePower}\r\n              getRandomColor={this.getRandomColor}\r\n              power={this.props.power}\r\n              dataObj={this.props.dataObj.data}\r\n              display={this.props.display}\r\n              playing={this.props.playing.playing}\r\n            />\r\n          </div>\r\n          <div className=\"drum-pads\">\r\n            <RenderSound\r\n              handleClickSound={this.handleClickSound}\r\n              dataObj={this.props.dataObj.data}\r\n              power={this.props.power}\r\n              getRandomColor={this.getRandomColor}\r\n              playing={this.props.playing.playing}\r\n              handleBorderColor={this.handleBorderColor}\r\n            />\r\n          </div>\r\n          <Volume\r\n            handleVolume={this.handleVolume}\r\n            currentVolume={this.props.volume}\r\n          />\r\n        </div>\r\n      );\r\n  }\r\n}\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Main);\r\n","import * as ActionTypes from \"./ActionTypes\";\r\n\r\nexport const GetData = (\r\n  state = { isLoading: true, errMess: null, data: [] },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case ActionTypes.ADD_DATA:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        errMess: null,\r\n        data: action.payload\r\n      };\r\n\r\n    case ActionTypes.DATA_LOADING:\r\n      return { ...state, isLoading: true, errMess: null, data: [] };\r\n\r\n    case ActionTypes.DATA_FAILED:\r\n      return { ...state, isLoading: false, errMess: action.payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import * as ActionTypes from \"./ActionTypes\";\r\n\r\nconst PowerReducer = (state = { power: false }, action) => {\r\n  switch (action.type) {\r\n    case ActionTypes.POWER:\r\n      return {\r\n        ...state,\r\n        power: action.payload\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default PowerReducer;\r\n","import * as ActionTypes from \"./ActionTypes\";\r\n\r\nconst DisplayReducer = (\r\n  state = { display: \"React-JS Drum-machine\" },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case ActionTypes.DISPLAY:\r\n      return {\r\n        ...state,\r\n        display: action.payload\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default DisplayReducer;\r\n","import * as ActionTypes from \"./ActionTypes\";\r\n\r\nconst VolumeReducer = (state = { volume: 0.5 }, action) => {\r\n  switch (action.type) {\r\n    case ActionTypes.VOLUME:\r\n      return {\r\n        ...state,\r\n        volume: action.payload\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default VolumeReducer;\r\n","import * as ActionTypes from \"./ActionTypes\";\r\n\r\nconst PlayingReducer = (state = { playing: null }, action) => {\r\n  switch (action.type) {\r\n    case ActionTypes.IS_PLAYING:\r\n      return {\r\n        ...state,\r\n        playing: action.payload\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default PlayingReducer;\r\n","import React, { Component } from \"react\";\r\nimport Main from \"./components/MainComponent\";\r\nimport \"./App.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport { ConfigureStore } from \"./redux/configureStore\";\r\n\r\nconst store = ConfigureStore();\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <Main />\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport logger from \"redux-logger\";\r\nimport { GetData } from \"./getDataReducer\";\r\nimport PowerReducer from \"./powerReducer\";\r\nimport DisplayReducer from \"./displayReducer\";\r\nimport VolumeReducer from \"./volumeReducer\";\r\nimport PlayingReducer from \"./playingReducer\";\r\n\r\nexport const ConfigureStore = () => {\r\n  const store = createStore(\r\n    combineReducers({\r\n      dataObj: GetData,\r\n      power: PowerReducer,\r\n      display: DisplayReducer,\r\n      volume: VolumeReducer,\r\n      playing: PlayingReducer\r\n    }),\r\n    applyMiddleware(thunk, logger)\r\n  );\r\n\r\n  return store;\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}