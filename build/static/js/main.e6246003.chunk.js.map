{"version":3,"sources":["components/DisplayComponent.js","components/TopSwitchPanelComponent.js","shared/data.js","components/RenderSound.js","components/VolumeComponent.js","components/MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["Display","_ref","playing","getRandomColor","displayMessage","toggleDisplay","isChecked","playingStyles","backgroundColor","concat","offStyles","react_default","a","createElement","onChange","style","className","TopSwitchPanel","toggleCheckBox","Fragment","FormGroup","Label","for","CustomInput","type","name","id","label","defaultChecked","DisplayComponent","BUTTONDATA","trigger","keyCode","url","RenderButton","buttonData","handleClickSound","onStyle","transform","boxShadow","offStyle","data","map","key","data-key","onClick","RenderSound","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","RenderSound_RenderButton","Component","Volume","currentVolume","changeVolume","defaultValue","min","max","event","Main","handleKeydownSound","drumKey","find","obj","power","playSound","toggleData","alert","soundName","index","console","log","sound","Audio","volume","play","setState","setTimeout","newVolume","target","value","message","JSON","parse","stringify","document","addEventListener","EventListener","colorValues","Math","floor","random","length","RenderSound_RenderSound","App","MainComponent_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e6246003.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Display = ({\r\n  playing,\r\n  getRandomColor,\r\n  displayMessage,\r\n  toggleDisplay,\r\n  isChecked\r\n}) => {\r\n  const playingStyles = {\r\n    backgroundColor: `${getRandomColor()}`\r\n  };\r\n  const offStyles = {\r\n    backgroundColor: `${isChecked ? \"var(--ltRed)\" : \"var(--dkRed)\"}`\r\n  };\r\n  return (\r\n    <div\r\n      onChange={() => toggleDisplay()}\r\n      style={playing ? playingStyles : offStyles}\r\n      className=\" col-8  display\"\r\n    >\r\n      {displayMessage}\r\n    </div>\r\n  );\r\n};\r\nexport default Display;\r\n","import React from \"react\";\r\nimport Display from \"./DisplayComponent\";\r\nimport { CustomInput, FormGroup, Label } from \"reactstrap\";\r\n\r\nexport default function TopSwitchPanel({\r\n  isChecked,\r\n  toggleCheckBox,\r\n  displayMessage,\r\n  toggleDisplay,\r\n  getRandomColor,\r\n  playing\r\n}) {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"col-4 power\">\r\n        <FormGroup>\r\n          <Label for=\"exampleCheckbox\">Power</Label>\r\n          <div className=\"switch\">\r\n            <CustomInput\r\n              type=\"switch\"\r\n              name=\"customSwitch\"\r\n              id=\"exampleCustomSwitch\"\r\n              label={!isChecked ? \"On\" : \"Off\"}\r\n              onChange={() => toggleCheckBox()}\r\n              defaultChecked={false}\r\n            />\r\n          </div>\r\n        </FormGroup>\r\n      </div>\r\n      <Display\r\n        displayMessage={displayMessage}\r\n        toggleDisplay={toggleDisplay}\r\n        isChecked={isChecked}\r\n        getRandomColor={getRandomColor}\r\n        playing={playing}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n}\r\n","export const BUTTONDATA = [\r\n  {\r\n    id: 0,\r\n    name: \"clap\",\r\n    trigger: \"A\",\r\n    keyCode: 65,\r\n    url: \"/assets/audio/clap.wav\",\r\n    playing: false\r\n  },\r\n  {\r\n    id: 1,\r\n    name: \"hihat\",\r\n    trigger: \"S\",\r\n    url: \"/assets/audio/hihat.wav\",\r\n    keyCode: 83,\r\n    playing: false\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"kick\",\r\n    trigger: \"D\",\r\n    url: \"/assets/audio/kick.wav\",\r\n    keyCode: 68,\r\n    playing: false\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"openhat\",\r\n    trigger: \"F\",\r\n    url: \"/assets/audio/openhat.wav\",\r\n    keyCode: 70,\r\n    playing: false\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"boom\",\r\n    trigger: \"G\",\r\n    url: \"/assets/audio/boom.wav\",\r\n    keyCode: 71,\r\n    playing: false\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"ride\",\r\n    trigger: \"H\",\r\n    url: \"/assets/audio/ride.wav\",\r\n    keyCode: 72,\r\n    playing: false\r\n  },\r\n  {\r\n    id: 6,\r\n    name: \"snare\",\r\n    trigger: \"J\",\r\n    url: \"/assets/audio/snare.wav\",\r\n    keyCode: 74,\r\n    playing: false\r\n  },\r\n  {\r\n    id: 7,\r\n    name: \"tom\",\r\n    trigger: \"K\",\r\n    url: \"/assets/audio/tom.wav\",\r\n    keyCode: 75,\r\n    playing: false\r\n  },\r\n  {\r\n    id: 8,\r\n    name: \"tink\",\r\n    trigger: \"L\",\r\n    url: \"/assets/audio/tink.wav\",\r\n    keyCode: 76,\r\n    playing: false\r\n  }\r\n];\r\n","import React, { Component } from \"react\";\r\n\r\nconst RenderButton = ({ buttonData, handleClickSound, isChecked }) => {\r\n  const onStyle = {\r\n    transform: \"scale(0.95)\",\r\n    boxShadow: \"1px 1px 4px 4px #D81159, -1px -1px 4px 4px #FFBC42\"\r\n  };\r\n  const offStyle = isChecked\r\n    ? { backgroundColor: \"var(--ltRed)\" }\r\n    : { backgroundColor: \"var(--dkRed)\" };\r\n\r\n  const data = buttonData.map(a => {\r\n    return (\r\n      <div\r\n        key={a.id}\r\n        className=\"outer-pad\"\r\n        style={a.playing ? onStyle : offStyle}\r\n      >\r\n        <div\r\n          className=\"inner-pad\"\r\n          data-key={a.keyCode}\r\n          onClick={() => {\r\n            handleClickSound(a.url, a.name, a.id);\r\n          }}\r\n        >\r\n          <kbd>{a.trigger}</kbd>\r\n          <span className=\"sound\">{a.name}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n  return <React.Fragment>{data}</React.Fragment>;\r\n};\r\n\r\nexport default class RenderSound extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <RenderButton\r\n        buttonData={this.props.buttonData}\r\n        handleClickSound={this.props.handleClickSound}\r\n        isChecked={this.props.isChecked}\r\n        getRandomColor={this.getRandomColor}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Volume({ currentVolume, changeVolume }) {\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-sm volume \">\r\n        <h6>Volume</h6>\r\n        <input\r\n          className=\"slider\"\r\n          defaultValue={currentVolume}\r\n          type=\"range\"\r\n          min=\"1\"\r\n          max=\"100\"\r\n          name=\"volume\"\r\n          onChange={event => changeVolume(event)}\r\n        />\r\n      </div>\r\n      <div className=\"speakers col-sm align-middle\">\r\n        <hr />\r\n        <hr />\r\n        <hr />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport TopSwitchPanel from \"./TopSwitchPanelComponent\";\r\nimport { BUTTONDATA } from \"../shared/data\";\r\nimport RenderSound from \"./RenderSound\";\r\nimport Volume from \"./VolumeComponent\";\r\n\r\nexport default class Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      buttonData: BUTTONDATA,\r\n      isChecked: null,\r\n      displayMessage: \"\",\r\n      currentVolume: 0.8\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.addEventListener(\"keydown\", this.handleKeydownSound);\r\n  }\r\n  componentWillUnmount() {\r\n    document.EventListener(\"keydown\", this.handleKeydownSound);\r\n  }\r\n  //handles the sounds when use keyboard\r\n  handleKeydownSound = event => {\r\n    const drumKey = this.state.buttonData.find(\r\n      obj => obj.keyCode === event.keyCode\r\n    );\r\n    const power = this.state.isChecked;\r\n    if (power && drumKey) {\r\n      this.playSound(drumKey.url, drumKey.name);\r\n      this.toggleData(drumKey.id);\r\n    } else if (!power && drumKey) {\r\n      alert(\"Please turn the app on!\");\r\n    }\r\n  };\r\n  //handles the sounds when use mouse click\r\n  handleClickSound = (url, soundName, index) => {\r\n    const power = this.state.isChecked;\r\n    if (power) {\r\n      this.playSound(url, soundName);\r\n      console.log(index);\r\n      this.toggleData(index);\r\n    } else return alert(\"Please turn the app on!\");\r\n  };\r\n\r\n  //plays the sound and activate the volume function\r\n  playSound = (url, soundName) => {\r\n    let sound = new Audio(url);\r\n    sound.volume = this.state.currentVolume;\r\n    sound.play();\r\n    this.toggleDisplay(soundName);\r\n  };\r\n\r\n  //changes message on the display\r\n  toggleDisplay = soundName => {\r\n    this.setState(() => {\r\n      return { displayMessage: soundName };\r\n    });\r\n    setTimeout(() => {\r\n      this.setState({ displayMessage: \"\" });\r\n    }, 900);\r\n  };\r\n\r\n  //toggle checkbox = power on and off\r\n\r\n  toggleCheckBox = () => {\r\n    const power = this.state.isChecked;\r\n    this.setState(() => {\r\n      return {\r\n        isChecked: !power,\r\n        displayMessage: !power === true ? \"Welcome\" : null\r\n      };\r\n    });\r\n  };\r\n  //changes the Volume\r\n  changeVolume = event => {\r\n    const power = this.state.isChecked;\r\n    const newVolume = event.target.value / 100;\r\n    const message = \"Volume: \" + event.target.value;\r\n\r\n    if (power) {\r\n      this.setState(() => {\r\n        return { currentVolume: newVolume };\r\n      });\r\n      this.toggleDisplay(message);\r\n    }\r\n  };\r\n  //change display background color\r\n  getRandomColor() {\r\n    let colorValues = [\"#D81159\", \"#218380\", \"#73D2DE\", \"#FFBC42\", \"#8F2D56\"];\r\n    return colorValues[Math.floor(Math.random() * colorValues.length)];\r\n  }\r\n\r\n  //change data.playing to true\r\n  toggleData = index => {\r\n    let obj = JSON.parse(JSON.stringify(this.state.buttonData));\r\n    obj[index].playing = true;\r\n    this.setState({ buttonData: obj });\r\n\r\n    setTimeout(() => {\r\n      obj[index].playing = false;\r\n      this.setState({ buttonData: obj });\r\n    }, 200);\r\n    console.log(obj);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"drum-machine\">\r\n        <div className=\"drum-panel row\">\r\n          <TopSwitchPanel\r\n            getRandomColor={this.getRandomColor}\r\n            toggleCheckBox={this.toggleCheckBox}\r\n            isChecked={this.state.isChecked}\r\n            buttonData={this.state.buttonData}\r\n            toggleDisplay={this.toggleDisplay}\r\n            displayMessage={this.state.displayMessage}\r\n          />\r\n        </div>\r\n        <div className=\"drum-pads\">\r\n          <RenderSound\r\n            handleClickSound={this.handleClickSound}\r\n            buttonData={this.state.buttonData}\r\n            isChecked={this.state.isChecked}\r\n            playing={this.state.playing}\r\n            getRandomColor={this.getRandomColor}\r\n          />\r\n        </div>\r\n        <Volume\r\n          changeVolume={this.changeVolume}\r\n          currentVolume={this.state.currentVolume}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport Main from \"./components/MainComponent\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return <Main />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}